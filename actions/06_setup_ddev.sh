#!/bin/bash

# Setup DDEV - Auto-generate DDEV configuration from site config
# Sets: setup_ddev_status, setup_ddev_message

set -euo pipefail

source "$(dirname "${BASH_SOURCE[0]}")/../lib/messaging.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../lib/common.sh"

ACTION=$(get_current_script_name)

main() {
    # Get state from previous pipeline stage
    local input
    if input=$(cat); then
        eval "$input"
    fi
    
    # Check if this action is enabled
    if ! is_enabled "$ACTION"; then
        set_status "$ACTION" "skipped" "Disabled in configuration"
        pass_state
        return 0
    fi
    
    msg_info "Setting up DDEV project..."
    
    # Load site configuration
    if ! load_site_config; then
        set_status "$ACTION" "error" "Failed to load site configuration"
        pass_state
        return 1
    fi
    
    # Check if required DDEV configuration variables are set
    if [[ -z "${PROJECT_TYPE:-}" ]]; then
        set_status "$ACTION" "error" "PROJECT_TYPE not configured in site config"
        msg_error "PROJECT_TYPE must be set in site configuration"
        pass_state
        return 1
    fi
    
    if [[ -z "${DDEV_PROJECT_NAME:-}" ]]; then
        set_status "$ACTION" "error" "DDEV_PROJECT_NAME not configured in site config"
        msg_error "DDEV_PROJECT_NAME must be set in site configuration"
        pass_state
        return 1
    fi
    
    # Set defaults for optional variables
    local php_version="${DDEV_PHP_VERSION:-8.2}"
    local site_local_path
    site_local_path=$(get_site_local_path)
    
    msg_info "Configuring DDEV project: ${DDEV_PROJECT_NAME} (${PROJECT_TYPE}, PHP ${php_version})"
    
    # Ensure site directory exists
    if [[ ! -d "$site_local_path" ]]; then
        msg_info "Creating site directory: $site_local_path"
        if ! mkdir -p "$site_local_path"; then
            set_status "$ACTION" "error" "Failed to create site directory: $site_local_path"
            pass_state
            return 1
        fi
    fi
    
    # Change to site directory for DDEV operations
    if ! cd "$site_local_path"; then
        set_status "$ACTION" "error" "Failed to change to site directory: $site_local_path"
        pass_state
        return 1
    fi
    
    # Handle existing DDEV projects
    if [[ -d ".ddev" ]]; then
        msg_warn "Existing .ddev directory found"
        
        # Check if existing project name matches
        if [[ -f ".ddev/config.yaml" ]]; then
            local existing_name
            existing_name=$(grep "^name:" .ddev/config.yaml | cut -d: -f2 | tr -d ' "' || echo "")
            
            if [[ "$existing_name" == "$DDEV_PROJECT_NAME" ]]; then
                msg_info "Existing DDEV project matches configuration (${DDEV_PROJECT_NAME})"
                set_status "$ACTION" "success" "DDEV project already configured correctly"
                pass_state
                return 0
            else
                msg_warn "Existing project name '$existing_name' differs from configured '${DDEV_PROJECT_NAME}'"
                msg_warn "Backing up existing .ddev directory"
                
                local backup_dir
                backup_dir=".ddev.backup.$(date +%Y%m%d_%H%M%S)"
                if ! mv .ddev "$backup_dir"; then
                    set_status "$ACTION" "error" "Failed to backup existing .ddev directory"
                    pass_state
                    return 1
                fi
                msg_info "Existing .ddev backed up to $backup_dir"
            fi
        fi
    fi
    
    # Create .ddev directory
    if ! mkdir -p .ddev; then
        set_status "$ACTION" "error" "Failed to create .ddev directory"
        pass_state
        return 1
    fi
    
    # Generate .ddev/config.yaml
    msg_info "Generating .ddev/config.yaml"
    
    cat > .ddev/config.yaml << EOF
name: ${DDEV_PROJECT_NAME}
type: ${PROJECT_TYPE}
docroot: ""
php_version: "${php_version}"
webserver_type: nginx-fpm
router_http_port: "80"
router_https_port: "443"
xdebug_enabled: false
additional_hostnames: []
additional_fqdns: []
database:
  type: mariadb
  version: "10.4"
nfs_mount_enabled: false
mutagen_enabled: false
use_dns_when_possible: true
composer_version: "2"

# Auto-generated by SiteFerry
# Generated on: $(date)
# Site: $(get_current_site_name)
EOF
    
    if [[ ! -f ".ddev/config.yaml" ]]; then
        set_status "$ACTION" "error" "Failed to create .ddev/config.yaml"
        pass_state
        return 1
    fi
    
    # Initialize DDEV project
    msg_info "Initializing DDEV project"
    
    if command -v ddev >/dev/null 2>&1; then
        # DDEV is installed, attempt to start the project
        if ddev start; then
            local project_url
            project_url=$(ddev describe | grep "Primary URL" | cut -d: -f2- | tr -d ' ' || echo "")
            
            if [[ -n "$project_url" ]]; then
                set_status "$ACTION" "success" "DDEV project configured and started: $project_url"
                msg_success "DDEV project started successfully"
                msg_info "Project URL: $project_url"
            else
                set_status "$ACTION" "success" "DDEV project configured and started"
                msg_success "DDEV project started successfully"
            fi
        else
            # DDEV start failed, but config was created
            set_status "$ACTION" "partial" "DDEV configured but failed to start (run 'ddev start' manually)"
            msg_warn "DDEV configuration created but project failed to start"
            msg_warn "You may need to run 'ddev start' manually from: $site_local_path"
        fi
    else
        # DDEV not installed
        set_status "$ACTION" "partial" "DDEV configured but DDEV not installed"
        msg_warn "DDEV configuration created successfully"
        msg_warn "Install DDEV from https://ddev.readthedocs.io/ to start the project"
        msg_info "Configuration saved to: ${site_local_path}.ddev/config.yaml"
    fi
    
    # Pass state to next stage
    pass_state
}

main